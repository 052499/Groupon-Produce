package com.example.grouponproduceapp.viewmodels

import android.net.Uri
import androidx.lifecycle.ViewModel
import com.example.grouponproduceapp.models.Product
import com.google.firebase.database.DataSnapshot
import com.google.firebase.database.DatabaseError
import com.google.firebase.database.FirebaseDatabase
import com.google.firebase.database.ValueEventListener
import com.google.firebase.storage.FirebaseStorage
import kotlinx.coroutines.channels.awaitClose
import kotlinx.coroutines.flow.Flow
import kotlinx.coroutines.flow.MutableStateFlow
import kotlinx.coroutines.flow.StateFlow
import kotlinx.coroutines.flow.callbackFlow
import java.util.UUID

class AdminVM: ViewModel() {

    private val _isImgsUploaded = MutableStateFlow(false)
    var isImgsUploaded: StateFlow<Boolean> = _isImgsUploaded

    private val _downloadedUrls = MutableStateFlow<ArrayList<String?>>(arrayListOf())
    var downloadedUrls : StateFlow<ArrayList<String?>> = _downloadedUrls

    private val _isProductSaved = MutableStateFlow<Boolean>(false)
    var isProductSaved : StateFlow<Boolean> = _isProductSaved


    fun saveImgsInDB(imgUri: ArrayList<Uri>){
        val downloadUrls = ArrayList<String?>()

        imgUri.forEach {uri ->
            val imgRef = FirebaseStorage.getInstance().reference.child("images").child(UUID.randomUUID().toString())
            imgRef.putFile(uri).continueWithTask {task ->
                if (!task.isSuccessful) {
                    task.exception?.let {
                        throw it
                    } }
                imgRef.downloadUrl
            }.addOnCompleteListener {task ->
                    val url = task.result
                    downloadUrls.add(url.toString())
                    if (downloadUrls.size == imgUri.size){
                        _isImgsUploaded.value = true
                        _downloadedUrls.value = downloadUrls
                    }
                }
        }
    }

    fun saveProduct(product: Product) {
        val getInstance= FirebaseDatabase.getInstance()
        getInstance.getReference("Admins").child("products/${product.productId}")
            .setValue(product).addOnSuccessListener {
                getInstance.getReference("Admins").child("category/${product.productCategory}").child(product.productId)
                    .setValue(product).addOnSuccessListener {
                        getInstance.getReference("Admins").child("type/${product.productType}").child(product.productId)
                            .setValue(product).addOnSuccessListener {
                                _isProductSaved.value = true
                            }
                    }

            }

    }

    fun fetchProducts(categoryTitle: String?): Flow<List<Product>> = callbackFlow {
        val dbPath = FirebaseDatabase.getInstance().getReference("Admins").child("products")

        val eventListener = object : ValueEventListener {
            override fun onDataChange(snapshot: DataSnapshot) {
                val products = ArrayList<Product>()
                for (product in snapshot.children) {
                    val prod = product.getValue(Product::class.java)
                    if (categoryTitle == "All" || prod?.productCategory == categoryTitle){
                        products.add(prod!!)
                    }
                }
                trySend(products)
            }
            override fun onCancelled(error: DatabaseError) {
            }
        }
        dbPath.addValueEventListener(eventListener)
        awaitClose{dbPath.removeEventListener(eventListener)}
    }
}
